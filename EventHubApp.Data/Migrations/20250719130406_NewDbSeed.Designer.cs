// <auto-generated />
using System;
using EventHubApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventHubApp.Data.Migrations
{
    [DbContext(typeof(EventHubAppDbContext))]
    [Migration("20250719130406_NewDbSeed")]
    partial class NewDbSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventHubApp.Data.Models.ApplicationUserEvent", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key to the referenced AspNetUser. Part of the entity composite PK.");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the referenced Event. Part of the entity composite PK.");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if ApplicationUserEvent entry is deleted");

                    b.HasKey("ApplicationUserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("ApplicationUserEvents");
                });

            modelBuilder.Entity("EventHubApp.Data.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Event identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Event description");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasComment("Event duration");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Event image url from the image store");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if Event is deleted");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date")
                        .HasComment("Event release date");

                    b.Property<string>("Sponsor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Event sponsor");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Event title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Event type");

                    b.HasKey("Id");

                    b.ToTable("Events", t =>
                        {
                            t.HasComment("Event in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae50a5ab-9642-466f-b528-3cc61071bb4c"),
                            Description = "Get ready for three unforgettable days of music, energy, and festival magic! ✨\r\n\r\nSofia Live Fest returns in 2025 for its biggest edition yet — with Massive Attack headlining June 29 in their long-awaited return to the region!",
                            Duration = 7,
                            ImageUrl = "https://cdn-az.allevents.in/events3/banners/cd2b2df36cf25faf4191a726e93b883ca6a8d7469b5b9372daa6ff0892064a81-rimg-w1200-h628-dcc3a5cf-gmir?v=1750226192",
                            IsDeleted = false,
                            ReleaseDate = new DateOnly(2025, 6, 27),
                            Sponsor = "Fan Zone",
                            Title = "Sofia Live Fest 2025",
                            Type = "Entertaining"
                        },
                        new
                        {
                            Id = new Guid("777634e2-3bb6-4748-8e91-7a10b70c78ac"),
                            Description = "A to JazZ Festival 14th Edition, 3-4-5-6 July 2025, South Park 2, Sofia, Bulgaria.\r\nA to JazZ Festival is FOUR DAYS of diverse music, culture and art, fun, education, and environmental responsibility!\r\nMore info: www.atojazz.bg",
                            Duration = 2,
                            ImageUrl = "https://cdn-az.allevents.in/events8/banners/effe12725d73373d6229ebf5a38957238278d7f2ae2e066eb422670b44b7b131-rimg-w1200-h444-dcf08ca6-gmir?v=1750237454",
                            IsDeleted = false,
                            ReleaseDate = new DateOnly(2025, 7, 3),
                            Sponsor = "JazZ Fondation",
                            Title = "A to JazZ 2025",
                            Type = "Music"
                        },
                        new
                        {
                            Id = new Guid("68fb84b9-ef2a-402f-b4fc-595006f5c275"),
                            Description = "On July 1, 2025, at Vidas Art Arena, Borisova Gradina, one of the most influential figures on the contemporary music scene will present a show that combines the best of Latin rhythms, urban sounds and club energy. Summer 2025 promises to be even hotter with the soundtrack of the hot Colombian star J Balvin.",
                            Duration = 1,
                            ImageUrl = "https://cdn-az.allevents.in/events4/banners/68d1519bb5a0c93c4aa36e8127f3d32e427a50e45a09e00b79a1e8abafdb1d4c-rimg-w1200-h628-dc030616-gmir?v=1750733582",
                            IsDeleted = false,
                            ReleaseDate = new DateOnly(2025, 7, 1),
                            Sponsor = "Fest Team",
                            Title = "J Balvin @ Sofia Solid - Vidas Art Arena",
                            Type = "Music"
                        },
                        new
                        {
                            Id = new Guid("02b52bb0-1c2b-49a4-ba66-6d33f81d38d1"),
                            Description = "Spanish flamenco sensation Chambao and La Marie are returning to Bulgarian soil for a magical tour, starting in Sofia on June 26th at Maimunarnika, filled with smiles, positive energy and unforgettable moments.",
                            Duration = 2,
                            ImageUrl = "https://cdn-az.allevents.in/events6/banners/bd3bb8c233ade380597b152ac9841527f036a4b3873cb59bbf89b17ad8bdd15f-rimg-w1200-h628-dcdcd3c0-gmir?v=1750693364",
                            IsDeleted = false,
                            ReleaseDate = new DateOnly(2025, 6, 26),
                            Sponsor = "Maimunarnika",
                            Title = "CHAMBAO Live in Sofia",
                            Type = "Dancing"
                        },
                        new
                        {
                            Id = new Guid("16376cc6-b3e0-4bf7-a0e4-9cbd1490522c"),
                            Description = "Guns N' Roses have announced their long-awaited return to Sofia as part of their massive tour in 2025. On July 21, Vasil Levski Stadium will transform into an arena of rock greatness, where fans will be able to experience the magic of the iconic anthems of Axl Rose, Slash and Duff McKagan.",
                            Duration = 1,
                            ImageUrl = "https://cdn-az.allevents.in/events9/banners/2b7fe9b1de287bd9803132ef352770734d64b76479ccc851124629a61a1e8847-rimg-w1200-h628-dc010101-gmir?v=1750650103",
                            IsDeleted = false,
                            ReleaseDate = new DateOnly(2025, 6, 21),
                            Sponsor = "EventHub",
                            Title = "Guns N' Roses",
                            Type = "Entertaining"
                        },
                        new
                        {
                            Id = new Guid("811a1a9e-61a8-4f6f-acb0-55a252c2b713"),
                            Description = "Welcome to the sixth edition of Sofia Graffiti Battle, which this year will begin the transformation of the underpass at the entrance to South Park!",
                            Duration = 2,
                            ImageUrl = "https://cdn-az.allevents.in/events5/banners/2908baee49bb75a5e82e011b2abed4940932618e7e6050f188dd35340ee004ba-rimg-w1200-h600-dc8ebf2f-gmir?v=1750638902",
                            IsDeleted = false,
                            ReleaseDate = new DateOnly(2025, 6, 28),
                            Sponsor = "Sofia Grafiti Tour",
                            Title = "SOFIA URBAN ART: Green walls of Sofia",
                            Type = "Art"
                        });
                });

            modelBuilder.Entity("EventHubApp.Data.Models.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("EventHubApp.Data.Models.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("Name", "Location")
                        .IsUnique();

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a1fdfb4-08c9-44a2-a46e-0b3c45ff57b9"),
                            IsDeleted = false,
                            Location = "Sofia, Bulgaria",
                            Name = "Arena 8888"
                        },
                        new
                        {
                            Id = new Guid("f4c3e429-0e36-47af-99a2-0c7581a7fc67"),
                            IsDeleted = false,
                            Location = "Sofia, Bulgaria",
                            Name = "South Park 2"
                        },
                        new
                        {
                            Id = new Guid("5ae6c761-1363-4a23-9965-171c70f935de"),
                            IsDeleted = false,
                            Location = "Sofia, Bulgaria",
                            Name = "Vidas Art Arena"
                        },
                        new
                        {
                            Id = new Guid("be80d2e4-1c91-4e86-9b73-12ef08c9c3d2"),
                            IsDeleted = false,
                            Location = "Sofia, Bulgaria",
                            Name = "Maimunarnika"
                        },
                        new
                        {
                            Id = new Guid("33c36253-9b68-4d8a-89ae-f3276f1c3f8a"),
                            IsDeleted = false,
                            Location = "Sofia, Bulgaria",
                            Name = "Vasil Levski Stadium"
                        },
                        new
                        {
                            Id = new Guid("844d9abd-104d-41ab-b14a-ce059779ad91"),
                            IsDeleted = false,
                            Location = "Plovdiv, Bulgaria",
                            Name = "The Collodrum"
                        },
                        new
                        {
                            Id = new Guid("54082f99-023b-4d68-89ac-44c00a0958d0"),
                            IsDeleted = false,
                            Location = "Varna, Bulgaria",
                            Name = "The Sea Garden"
                        });
                });

            modelBuilder.Entity("EventHubApp.Data.Models.PlaceEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AvailableTickets")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Showtime")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("EventId", "PlaceId", "Showtime")
                        .IsUnique();

                    b.ToTable("PlacesEvents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71a411ec-d23c-4abb-b50c-75571d0a3cff"),
                            AvailableTickets = 10000,
                            EventId = new Guid("ae50a5ab-9642-466f-b528-3cc61071bb4c"),
                            IsDeleted = false,
                            PlaceId = new Guid("8a1fdfb4-08c9-44a2-a46e-0b3c45ff57b9"),
                            Showtime = "18:30"
                        },
                        new
                        {
                            Id = new Guid("30c505d0-9833-4087-9377-43ac8ab34e07"),
                            AvailableTickets = 1000,
                            EventId = new Guid("777634e2-3bb6-4748-8e91-7a10b70c78ac"),
                            IsDeleted = false,
                            PlaceId = new Guid("f4c3e429-0e36-47af-99a2-0c7581a7fc67"),
                            Showtime = "13:00"
                        },
                        new
                        {
                            Id = new Guid("130f6630-5593-4165-8e9e-de718ee1fb72"),
                            AvailableTickets = 12000,
                            EventId = new Guid("68fb84b9-ef2a-402f-b4fc-595006f5c275"),
                            IsDeleted = false,
                            PlaceId = new Guid("5ae6c761-1363-4a23-9965-171c70f935de"),
                            Showtime = "22:15"
                        },
                        new
                        {
                            Id = new Guid("c96549ed-7a19-4e83-856e-976cf306d611"),
                            AvailableTickets = 120,
                            EventId = new Guid("02b52bb0-1c2b-49a4-ba66-6d33f81d38d1"),
                            IsDeleted = false,
                            PlaceId = new Guid("be80d2e4-1c91-4e86-9b73-12ef08c9c3d2"),
                            Showtime = "19:00"
                        },
                        new
                        {
                            Id = new Guid("30864830-db09-412a-a816-6dbaccc1374c"),
                            AvailableTickets = 150,
                            EventId = new Guid("16376cc6-b3e0-4bf7-a0e4-9cbd1490522c"),
                            IsDeleted = false,
                            PlaceId = new Guid("33c36253-9b68-4d8a-89ae-f3276f1c3f8a"),
                            Showtime = "17:45"
                        },
                        new
                        {
                            Id = new Guid("a22c43b7-bd1d-46cd-b419-dba244e533cc"),
                            AvailableTickets = 550,
                            EventId = new Guid("811a1a9e-61a8-4f6f-acb0-55a252c2b713"),
                            IsDeleted = false,
                            PlaceId = new Guid("f4c3e429-0e36-47af-99a2-0c7581a7fc67"),
                            Showtime = "17:00"
                        });
                });

            modelBuilder.Entity("EventHubApp.Data.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlaceEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PlaceEventId", "UserId")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EventHubApp.Data.Models.ApplicationUserEvent", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventHubApp.Data.Models.Event", "Event")
                        .WithMany("UserWatchlists")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventHubApp.Data.Models.Manager", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithOne()
                        .HasForeignKey("EventHubApp.Data.Models.Manager", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventHubApp.Data.Models.Place", b =>
                {
                    b.HasOne("EventHubApp.Data.Models.Manager", "Manager")
                        .WithMany("ManagedPlaces")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("EventHubApp.Data.Models.PlaceEvent", b =>
                {
                    b.HasOne("EventHubApp.Data.Models.Event", "Event")
                        .WithMany("EventProjections")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EventHubApp.Data.Models.Place", "Place")
                        .WithMany("PlaceEvents")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("EventHubApp.Data.Models.Ticket", b =>
                {
                    b.HasOne("EventHubApp.Data.Models.PlaceEvent", "PlaceEventProjection")
                        .WithMany("Tickets")
                        .HasForeignKey("PlaceEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaceEventProjection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventHubApp.Data.Models.Event", b =>
                {
                    b.Navigation("EventProjections");

                    b.Navigation("UserWatchlists");
                });

            modelBuilder.Entity("EventHubApp.Data.Models.Manager", b =>
                {
                    b.Navigation("ManagedPlaces");
                });

            modelBuilder.Entity("EventHubApp.Data.Models.Place", b =>
                {
                    b.Navigation("PlaceEvents");
                });

            modelBuilder.Entity("EventHubApp.Data.Models.PlaceEvent", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
